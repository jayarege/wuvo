import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  SafeAreaView,
  StatusBar,
  Alert,
  Dimensions,
  Platform
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as WebBrowser from 'expo-web-browser';
import * as Google from 'expo-auth-session/providers/google';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Make sure to register redirect
WebBrowser.maybeCompleteAuthSession();

const { width, height } = Dimensions.get('window');

// Replace these with your actual client IDs from Google Cloud Console
const CLIENT_ID = "YOUR_WEB_CLIENT_ID";
const ANDROID_CLIENT_ID = "YOUR_ANDROID_CLIENT_ID"; // Optional for now
const IOS_CLIENT_ID = "YOUR_IOS_CLIENT_ID"; // The one you already created
const EXPO_CLIENT_ID = CLIENT_ID; // Same as web client ID for Expo Go

const AuthScreen = ({ onAuthenticate, isDarkMode }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLogin, setIsLogin] = useState(true);
  const [userInfo, setUserInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Set up Google Auth
  const [request, response, promptAsync] = Google.useAuthRequest({
    expoClientId: EXPO_CLIENT_ID,
    iosClientId: IOS_CLIENT_ID,
    androidClientId: ANDROID_CLIENT_ID,
    webClientId: CLIENT_ID,
  });

  // Check if user is already logged in
  useEffect(() => {
    const checkLoginStatus = async () => {
      try {
        const userJson = await AsyncStorage.getItem('@user_info');
        if (userJson) {
          setUserInfo(JSON.parse(userJson));
          onAuthenticate(); // Auto-login if user data exists
        }
      } catch (e) {
        console.error('Failed to load user data', e);
      }
    };
    
    checkLoginStatus();
  }, []);

  // Handle Google authentication response
  useEffect(() => {
    if (response?.type === 'success') {
      setIsLoading(true);
      // Extract authentication token
      const { authentication } = response;
      
      // Get user info using the access token
      fetchUserInfo(authentication.accessToken);
    }
  }, [response]);

  const fetchUserInfo = async (token) => {
    if (!token) return;
    
    try {
      const response = await fetch(
        'https://www.googleapis.com/userinfo/v2/me',
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      const user = await response.json();
      await AsyncStorage.setItem('@user_info', JSON.stringify(user));
      
      setUserInfo(user);
      setIsLoading(false);
      
      // Authenticate and navigate to main app
      onAuthenticate();
    } catch (error) {
      console.error('Error fetching user data:', error);
      setIsLoading(false);
      Alert.alert('Authentication Error', 'Failed to get user information.');
    }
  };

  // Function to handle regular authentication
  const handleAuthentication = () => {
    if (!email.trim() || !password.trim()) {
      Alert.alert('Error', 'Please fill in all required fields');
      return;
    }
    
    // For demo purposes, immediately authenticate
    Alert.alert(
      'Success',
      'Login successful',
      [{ 
        text: 'OK', 
        onPress: () => {
          console.log('Successful authentication');
          if (onAuthenticate) {
            onAuthenticate();
          }
        }
      }]
    );
  };
  
  // Handle Google Sign In
  const handleGoogleSignIn = async () => {
    setIsLoading(true);
    
    try {
      await promptAsync();
    } catch (error) {
      console.error('Google Sign In Error:', error);
      Alert.alert('Authentication Error', 'Failed to sign in with Google.');
      setIsLoading(false);
    }
  };
  
  // Simplified skip function that calls the onAuthenticate prop
  const handleSkip = () => {
    console.log('Skipping authentication for development');
    if (onAuthenticate) {
      onAuthenticate();
    } else {
      Alert.alert(
        'Development Notice',
        'Authentication callback not configured. In a real app, this would take you to the main screen.',
        [{ text: 'OK' }]
      );
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      
      {/* Development Skip Button */}
      <TouchableOpacity 
        style={styles.skipButton}
        onPress={handleSkip}
        activeOpacity={0.7}
      >
        <Text style={styles.skipButtonText}>Skip</Text>
      </TouchableOpacity>
      
      {/* Header with Logo and Spotlights */}
      <View style={styles.headerContainer}>
        {/* Left Spotlight - coming from top left */}
        <View style={styles.leftSpotlight} />
        
        {/* Right Spotlight - coming from top right */}
        <View style={styles.rightSpotlight} />
        
        {/* Logo */}
        <Text style={styles.logoText}>WUVO</Text>
        
        {/* Welcome Text */}
        <Text style={styles.welcomeText}>Welcome Back!</Text>
        <Text style={styles.subtitleText}>Sign in to continue</Text>
      </View>
      
      {/* Form Inputs */}
      <View style={styles.formContainer}>
        {/* Email Input */}
        <View style={styles.inputContainer}>
          <Ionicons name="mail-outline" size={20} color="#808080" style={styles.inputIcon} />
          <TextInput
            style={styles.input}
            placeholder="Email Address"
            placeholderTextColor="#808080"
            value={email}
            onChangeText={setEmail}
            autoCapitalize="none"
            keyboardType="email-address"
          />
        </View>
        
        {/* Password Input */}
        <View style={styles.inputContainer}>
          <Ionicons name="lock-closed-outline" size={20} color="#808080" style={styles.inputIcon} />
          <TextInput
            style={styles.input}
            placeholder="Password"
            placeholderTextColor="#808080"
            value={password}
            onChangeText={setPassword}
            secureTextEntry
          />
        </View>
        
        {/* Forgot Password */}
        <TouchableOpacity style={styles.forgotPasswordContainer}>
          <Text style={styles.forgotPasswordText}>Forgot Password?</Text>
        </TouchableOpacity>
        
        {/* Sign In Button */}
        <TouchableOpacity 
          style={styles.signInButton}
          onPress={handleAuthentication}
          disabled={isLoading}
        >
          <Text style={styles.signInButtonText}>
            {isLoading ? 'Signing in...' : 'Sign In'}
          </Text>
        </TouchableOpacity>
        
        {/* Direct Skip Link - More visible alternative */}
        <TouchableOpacity 
          style={styles.devSkipContainer}
          onPress={handleSkip}
        >
          <Text style={styles.devSkipText}>DEV MODE: Skip to Main App</Text>
        </TouchableOpacity>
        
        {/* OR Divider */}
        <View style={styles.orContainer}>
          <Text style={styles.orText}>OR</Text>
        </View>
        
        {/* Social Sign In */}
        <TouchableOpacity 
          style={styles.socialButton}
          onPress={handleGoogleSignIn}
          disabled={isLoading}
        >
          <View style={styles.socialIconContainer}>
            <Ionicons name="logo-google" size={20} color="#FFFFFF" />
          </View>
          <Text style={styles.socialButtonText}>
            {isLoading ? 'Connecting...' : 'Continue with Google'}
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.socialButton}
          onPress={() => Alert.alert('Notice', 'Apple Sign In not configured yet.')}
          disabled={isLoading}
        >
          <View style={styles.socialIconContainer}>
            <Ionicons name="logo-apple" size={20} color="#FFFFFF" />
          </View>
          <Text style={styles.socialButtonText}>Continue with Apple</Text>
        </TouchableOpacity>
        
        {/* Switch to Sign Up */}
        <View style={styles.signUpContainer}>
          <Text style={styles.signUpText}>Don't have an account? </Text>
          <TouchableOpacity onPress={() => setIsLogin(!isLogin)}>
            <Text style={styles.signUpLinkText}>Sign Up</Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121619',
  },
  headerContainer: {
    alignItems: 'center',
    paddingTop: 40,
    paddingBottom: 30,
    position: 'relative',
  },
  leftSpotlight: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: width * 0.5,
    height: 150,
    backgroundColor: 'rgba(80, 80, 80, 0.25)',
    transform: [{ skewY: '-30deg' }],
    zIndex: 1,
  },
  rightSpotlight: {
    position: 'absolute',
    top: 0,
    right: 0,
    width: width * 0.5,
    height: 150,
    backgroundColor: 'rgba(80, 80, 80, 0.25)',
    transform: [{ skewY: '30deg' }],
    zIndex: 1,
  },
  logoText: {
    fontSize: 42,
    fontWeight: 'bold',
    color: '#8A2BE2',
    marginBottom: 20,
    zIndex: 2,
    letterSpacing: 1,
  },
  welcomeText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
    zIndex: 2,
  },
  subtitleText: {
    fontSize: 16,
    color: '#A0A0A0',
    zIndex: 2,
  },
  formContainer: {
    flex: 1,
    paddingHorizontal: 24,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#2A3132',
    borderRadius: 8,
    marginBottom: 16,
    paddingHorizontal: 16,
    height: 50,
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    height: 50,
    color: '#FFFFFF',
    fontSize: 16,
  },
  forgotPasswordContainer: {
    alignSelf: 'flex-end',
    marginBottom: 20,
  },
  forgotPasswordText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#8A2BE2',
  },
  signInButton: {
    height: 55,
    borderRadius: 8,
    backgroundColor: '#8A2BE2',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  signInButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  // Development skip link - more obvious option
  devSkipContainer: {
    alignItems: 'center',
    paddingVertical: 8,
    marginBottom: 8,
  },
  devSkipText: {
    color: '#FFD700', // Gold color to stand out
    fontSize: 14,
    fontWeight: '600',
    textDecorationLine: 'underline',
  },
  orContainer: {
    alignItems: 'center',
    marginVertical: 15,
  },
  orText: {
    color: '#A0A0A0',
    fontSize: 14,
    fontWeight: '600',
  },
  socialButton: {
    flexDirection: 'row',
    height: 55,
    borderRadius: 8,
    backgroundColor: '#2A3132',
    alignItems: 'center',
    marginBottom: 16,
    paddingHorizontal: 16,
  },
  socialIconContainer: {
    width: 30,
  },
  socialButtonText: {
    flex: 1,
    textAlign: 'center',
    fontSize: 16,
    fontWeight: '500',
    color: '#FFFFFF',
  },
  signUpContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 10,
  },
  signUpText: {
    fontSize: 14,
    color: '#A0A0A0',
  },
  signUpLinkText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#8A2BE2',
  },
  // Skip button styles
  skipButton: {
    position: 'absolute',
    top: 50,
    right: 20,
    backgroundColor: 'rgba(138, 43, 226, 0.3)',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    zIndex: 10,
    borderWidth: 1,
    borderColor: '#8A2BE2',
  },
  skipButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
});

export default AuthScreen;
